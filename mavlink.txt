mavlink_main -> start/stop/stop-all/status/stream/boot_complete
start:
 1-> count instance;
 2-> start task with name:"mavlink_ifx"(x is instance id);
 3-> main -> Mavlink::start_helper;
 4-> sleep 500us per instance, exit.
start_helper:
 1-> instance->task_main(argc, argv);
task_main:
 1->
	-b set baudrate(9600 - 1000000)
	-r set datarate(10 - 10000000)
	-d set device(e.g. /dev/ttyACM0 or /dev/ttyS1) && set protocol:SERIAL
	-m set mode(custom/camera/onboard/osd/magic/config)
	-x set ftp on
 2-> flush stdout in case MAVLink is about to take it over(!!!) then open port(use mavlink_open_uart, it will wait for usb connection)
 3-> Create a send mutex. if ftp/forwarding on, Create a message buffer mutex
 4-> Initialize system properties
 5-> Start receive thread(in mavlink_receiver.cpp) -> MavlinkReceiver::start_helper -> MavlinkReceiver::receive_thread, it will start a thread with name "mavlink_rcv_ifx"
 6-> update paramters ... set main loop delay ...
 7-> send the system version blindly:
	send_autopilot_capabilites(mavlink_main.cpp) -> mavlink_msg_autopilot_version_send_struct(mavlink_msg_autopoilt_version.h) ->
	_mav_finalize_message_chan_send(mavlink_helpers.h) -> _mavlink_send_uart(mavlink_helpers.h) ->
	MAVLINK_SEND_UART_BYTES(mavlink_helpers.h, defined at mavlink_bridge_header.h) -> mavlink_send_uart_bytes(mavlink_main.cpp)
 8-> entry main loop
 
 
LL_APPEND(_mavlink_instances, this); -> add instance: bump the instance count while the instance is fully initialized.
